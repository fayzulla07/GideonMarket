@page "/income"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.DropDowns
@using GideonMarket.Web.Client.Pages.Components.Place;
@using GideonMarket.Web.Client.Pages.Components.Product;

<SfCard ID="BasicCard">
    <CardHeader Title="Создать новый приход" />
    <CardContent>
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            <SfComboBox TValue="string" TItem="PlaceViewModel" Placeholder="Выбрать места" DataSource="@Places">
                <ComboBoxFieldSettings Text="Name" Value="Id"></ComboBoxFieldSettings>
            </SfComboBox>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            <SfComboBox TValue="string" TItem="PlaceViewModel" Placeholder="Выбрать поставщика" DataSource="@Places">
                <ComboBoxFieldSettings Text="Name" Value="Id"></ComboBoxFieldSettings>
            </SfComboBox>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6" >
            <SfTextBox CssClass="e-outline" Placeholder="Описание" FloatLabelType="@FloatLabelType.Auto" Autocomplete="AutoComplete.Off"/>
        </div>
    </CardContent>
    <CardFooter>
        @*<CardFooterContent>
                <button class="btn btn-primary" @onclick="OpenNewIncome">Создать</button>
            </CardFooterContent>*@
    </CardFooter>
</SfCard>

@*<GridEvents OnActionComplete="ActionComplete" TValue="IncomeItemViewModel"></GridEvents>*@
<SfGrid DataSource="@Data" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })" AllowPaging="true">
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
    <GridColumns>
        <GridColumn Field=@nameof(IncomeItemViewModel.Id) Visible="false" HeaderText="ID" IsPrimaryKey="true" IsIdentity="true" ValidationRules="@(new ValidationRules{ Required=true})" TextAlign="TextAlign.Right" Width="120"></GridColumn>

        <GridColumn Field=@nameof(IncomeItemViewModel.ProductId) HeaderText="Продукт" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"
                    EditType="EditType.DropDownEdit" ForeignKeyField="Id" ForeignKeyValue="Name" DataSource="@lstProduct"></GridColumn>
        <GridColumn Field=@nameof(IncomeItemViewModel.Count) HeaderText="Количество" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
        <GridColumn Field=@nameof(IncomeItemViewModel.Price) HeaderText="Цена" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
        <GridColumn Field=@nameof(IncomeItemViewModel.Description) HeaderText="Описание" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>
<br />
<button class="btn btn-primary" @onclick="@SendData">Создать</button>
@code{
    [Inject]
    public HttpClient client { get; set; }
    public List<IncomeItemViewModel> Data { get; set; }
    public List<ProductViewModel> lstProduct { get; set; }
    public List<PlaceViewModel> Places { get; set; }
    EditModified editType;
    protected async override Task OnInitializedAsync()
    {

        lstProduct = await client.GetFromJsonAsync<List<ProductViewModel>>($"/api/product");

        Places = await client.GetFromJsonAsync<List<PlaceViewModel>>($"api/place");
    }

    void SendData()
    {

    }

    public void ActionComplete(ActionEventArgs<IncomeItemViewModel> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            editType = EditModified.Updated;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            editType = EditModified.Added;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (editType == EditModified.Added)
            {
                //Data.Add(args.Data);
            }
            else if (editType == EditModified.Updated)
            {
                var res = Data.FirstOrDefault(p => p.Id == args.Data.Id);
                if (res != null)
                {
                    res.Id = args.Data.Id;
                    res.IncomeId = args.Data.IncomeId;
                    res.Price = args.Data.Price;
                    res.ProductId = args.Data.ProductId;
                    res.Count = args.Data.Count;
                    res.Description = args.Data.Description;
                }
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Data.Remove(args.Data);
        }
        //else if(args)
    }

}
