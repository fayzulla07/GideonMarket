@page "/income"
@using GideonMarket.Web.Client.Pages.Components.Place;
@using GideonMarket.Web.Client.Pages.Components.Product;
@using GideonMarket.Web.Client.Pages.Components.Supplier;
<div class="h2">Добавление прихода</div>


<RadzenTemplateForm Data="@formData" Submit="@((IncomeViewModel args) => { Submit(args); })">
    <RadzenFieldset Text="общая приход">
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Склад или места" />
            </div>
            <div class="col-md-10">
                <RadzenDropDown @bind-Value="formData.PlaceId" AllowClear="true" Placeholder="выберите что нибудь" Data="@Places" style="width: 100%;" TextProperty="Name" ValueProperty="Id" Name="PlaceId">
                </RadzenDropDown>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Поставщик" />
            </div>
            <div class="col-md-10">
                <RadzenDropDown @bind-Value="formData.SupplierId" AllowClear="true" Placeholder="выберите что нибудь" Data="@Suppliers" style="width: 100%;" TextProperty="FullName" ValueProperty="Id" Name="SupplierId">
                </RadzenDropDown>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2 align-items-center d-flex">
                <RadzenLabel Text="Поставщик" />
            </div>
            <div class="col-md-10">
                <RadzenTextBox @bind-Value="formData.Description" Name="Description" style="width: 100%;"></RadzenTextBox>
            </div>
        </div>
        <div class="row justify-content-center hide">
            <div class="col-md-12 d-flex align-items-end justify-content-end" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Сохранить" />
            </div>
        </div>
    </RadzenFieldset>


</RadzenTemplateForm>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Создать" Click="@InsertRow" />
<RadzenButton  style="margin-bottom: 10px" ButtonStyle="ButtonStyle.Secondary" Text="Отправить" Click="@SendData" />
<RadzenDataGrid @ref="Grid" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Data" TItem="IncomeItemViewModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn Width="100px" TItem="IncomeItemViewModel" Property="@nameof(IncomeItemViewModel.Id)" Visible="false" Title="@nameof(IncomeItemViewModel.Id)" />
        <RadzenDataGridColumn Width="200px" TItem="IncomeItemViewModel" Property="ProductId" Title="Продукт">
            <Template Context="dsourse">
                <span>@lstProduct.FirstOrDefault(x => x.Id == @dsourse.ProductId)?.Name</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenDropDown @bind-Value="dsourse.ProductId" Data="@lstProduct" TextProperty="Name" ValueProperty="Id" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="IncomeItemViewModel" Property="Count" Title="Количество">
            <Template Context="dsourse">
                <span>@dsourse.Count</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenNumeric Min="0" @bind-Value="dsourse.Count" Style="width:100%"></RadzenNumeric>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="IncomeItemViewModel" Property="Price" Title="Цена">
            <Template Context="dsourse">
                <span>@dsourse.Price тг</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenNumeric Min="0" @bind-Value="dsourse.Price" Style="width:100%"></RadzenNumeric>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="IncomeItemViewModel" Title="Цена">
            <Template Context="dsourse">
                <span>@(dsourse.Price * (decimal)dsourse.Count) тг</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="IncomeItemViewModel" Property="Description" Title="Описание">
            <Template Context="dsourse">
                <span>@dsourse.Description</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenTextBox @bind-Value="dsourse.Description" Style="width:100%"></RadzenTextBox>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="IncomeItemViewModel" Context="dsourse" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="dsourse">
                <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(dsourse))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => SaveRow(dsourse))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(dsourse))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="IncomeItemViewModel" Context="dsourse" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="dsourse">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteRow(dsourse))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteRow(dsourse))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code{
    IncomeViewModel formData = new IncomeViewModel();
    RadzenDataGrid<IncomeItemViewModel> Grid;
    [Inject]
    public IAppService client { get; set; }
    public List<IncomeItemViewModel> Data = new List<IncomeItemViewModel>();
    public List<ProductViewModel> lstProduct { get; set; }
    public List<PlaceViewModel> Places { get; set; }
    public List<SupplierViewModel> Suppliers { get; set; }
  
    protected async override Task OnInitializedAsync()
    {
        lstProduct = await client.GetAsync<List<ProductViewModel>>($"/api/product");
        Suppliers = await client.GetAsync<List<SupplierViewModel>>("/api/supplier");
        Places = await client.GetAsync<List<PlaceViewModel>>($"api/place");
    }

    async Task SendData()
    {
        var vvv = Grid.Data.Count();
        formData.IncomeItems = Grid.Data.ToList();
        await client.PostAsync<IncomeViewModel>(formData, "/api/income");
    }

    void EditRow(IncomeItemViewModel incomeItem)
    {
        Grid.EditRow(incomeItem);

    }

    void OnUpdateRow(IncomeItemViewModel incomeItem)
    {

    }

    void SaveRow(IncomeItemViewModel IncomeItemViewModel)
    {
        Grid.UpdateRow(IncomeItemViewModel);
    }

    void CancelEdit(IncomeItemViewModel IncomeItemViewModel)
    {
        Grid.CancelEditRow(IncomeItemViewModel);
    }

    void DeleteRow(IncomeItemViewModel incomeItem)
    {
        Data.Remove(incomeItem);
        Grid.CancelEditRow(incomeItem);
    }

    void InsertRow()
    {
        Grid.InsertRow(new IncomeItemViewModel());
    }

    void OnCreateRow(IncomeItemViewModel IncomeItemViewModel)
    {

    }

    void Submit(IncomeViewModel model)
    {

    }

}
