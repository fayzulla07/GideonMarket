@page "/income"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.DropDowns
@using GideonMarket.Web.Client.Pages.Components.Place;
@using GideonMarket.Web.Client.Pages.Components.Product;
@using GideonMarket.Web.Client.Pages.Components.Supplier;
@using System.Collections.ObjectModel;
<SfCard ID="BasicCard">
    <CardHeader Title="Создать новый приход" />
    <CardContent>

        <div class="row">
            <div class="col col-md-6 col-12">
                <SfComboBox TValue="string" TItem="PlaceViewModel" Placeholder="Выбрать места" FloatLabelType="@FloatLabelType.Auto" DataSource="@Places" @bind-Value="@pid">
                    <ComboBoxFieldSettings Text="Name" Value="Id"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
            <div class="col col-md-6 col-12">
                <SfComboBox TValue="string" TItem="SupplierViewModel" Placeholder="Выбрать поставщика" FloatLabelType="@FloatLabelType.Auto" DataSource="@Suppliers" @bind-Value="@sid">
                    <ComboBoxFieldSettings Text="FullName" Value="Id"></ComboBoxFieldSettings>
                </SfComboBox>

            </div>
            <div class="col col-md-6 col-12">
                <SfTextBox CssClass="e-outline" Placeholder="Описание" FloatLabelType="@FloatLabelType.Auto" Autocomplete="AutoComplete.Off" @bind-Value="@descr" />


            </div>
            <div class="col col-md-6 col-12">
                <button class="btn btn-primary" style="margin-top:20px;" @onclick="SendData">Создать</button>
            </div>
        </div>

    </CardContent>
    <CardFooter>
        @*<CardFooterContent>
                <button class="btn btn-primary" @onclick="OpenNewIncome">Создать</button>
            </CardFooterContent>*@
    </CardFooter>
</SfCard>


<SfGrid DataSource="@Data" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })" AllowPaging="true">
    <GridEvents OnActionComplete="ActionComplete" TValue="IncomeItemViewModel"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
    <GridColumns>
        <GridColumn Field=@nameof(IncomeItemViewModel.Id) Visible="false" HeaderText="ID" IsPrimaryKey="true" IsIdentity="true" ValidationRules="@(new ValidationRules{ Required=true})" TextAlign="TextAlign.Right" Width="120"></GridColumn>

        <GridColumn Field=@nameof(IncomeItemViewModel.ProductId) HeaderText="Продукт" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"
                    EditType="EditType.DropDownEdit" ForeignKeyField="Id" ForeignKeyValue="Name" DataSource="@lstProduct"></GridColumn>
        <GridColumn Field=@nameof(IncomeItemViewModel.Count) HeaderText="Количество" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
        <GridColumn Field=@nameof(IncomeItemViewModel.Price) HeaderText="Цена" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
        <GridColumn Field=@nameof(IncomeItemViewModel.Description) HeaderText="Описание" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>
<br />

@code{
    [Inject]
    public IAppService client { get; set; }
    public List<IncomeItemViewModel> Data = new List<IncomeItemViewModel>();
    public List<ProductViewModel> lstProduct { get; set; }
    public List<PlaceViewModel> Places { get; set; }
    public List<SupplierViewModel> Suppliers { get; set; }
    EditModified editType;

    string pid;
    string sid;
    string descr;
    protected async override Task OnInitializedAsync()
    {
        lstProduct = await client.GetAsync<List<ProductViewModel>>($"/api/product");
        Suppliers = await client.GetAsync<List<SupplierViewModel>>("/api/supplier");
        Places = await client.GetAsync<List<PlaceViewModel>>($"api/place");
    }

    async Task SendData()
    {
        IncomeViewModel newIncome = new IncomeViewModel();
        newIncome.PlaceId = Convert.ToInt32(pid);
        newIncome.SupplierId = Convert.ToInt32(sid);
        newIncome.Description = descr;
        newIncome.IncomeItems = Data;
        await client.PostAsync<IncomeViewModel>(newIncome, "/api/income");
    }


    public void ActionComplete(ActionEventArgs<IncomeItemViewModel> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Data.Remove(args.Data);
        }
        //else if(args)
    }

}
