@using Radzen
@using Radzen.Blazor

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="" Click="@InsertRow" />
<RadzenDataGrid @ref="rGrid" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true"
                EditMode="DataGridEditMode.Single"
                Data="@dataList" TItem="CustomerViewModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn Width="100px" TItem="CustomerViewModel" Property="Id" Title="cust Id" Frozen="true" />
        <RadzenDataGridColumn TItem="CustomerViewModel" Property="FullName" Title="Cust Name">
            <EditTemplate Context="dat">
                <RadzenTextBox @bind-Value="dat.FullName" Style="width:100%; display: block" Name="custName" />
                <RadzenRequiredValidator Text="Name is required" Component="custName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="200px" TItem="CustomerViewModel" Property="Customer.CompanyName" Title="Customer">
            <EditTemplate Context="dat">
                <RadzenDropDown @bind-Value="dat.PriceListId" Data="@pList" TextProperty="Name" ValueProperty="Id" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CustomerViewModel" Property="Email" Title="Email">
            <EditTemplate Context="dat">
                <RadzenTextBox @bind-Value="dat.Email" Style="width:100%; display: block" Name="email" />
                <RadzenEmailValidator Text="Email is invalid" Component="email" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CustomerViewModel" Context="datCtx" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="dat">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(dat))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="dat">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(dat))" />
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(dat))" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CustomerViewModel" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="dat">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(dat))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="dat">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(dat))" />
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    [Inject]
    public IAppService client { get; set; }
    RadzenDataGrid<CustomerViewModel> rGrid;
    IList<CustomerViewModel> dataList;
    IList<PriceListViewModel> pList;

    protected async override Task OnInitializedAsync()
    {
        dataList = await client.GetAsync<List<CustomerViewModel>>("/api/customer");
        pList = await client.GetAsync<List<PriceListViewModel>>("/api/pricelist");
    }

    void EditRow(CustomerViewModel obj)
    {
        rGrid.EditRow(obj);
    }

    void OnUpdateRow(CustomerViewModel obj)
    {
        client.UpdateAsync<CustomerViewModel>(obj, obj.Id, $"/api/Customer/{obj.Id}").GetAwaiter().GetResult();
    }

    void SaveRow(CustomerViewModel obj)
    {
        rGrid.UpdateRow(obj);
    }

    void CancelEdit(CustomerViewModel obj)
    {
        rGrid.CancelEditRow(obj);
    }

    void DeleteRow(CustomerViewModel obj)
    {
        if (dataList.Contains(obj))
        {
            client.DeleteAsync(obj.Id, $"/api/customer/{obj.Id}").GetAwaiter().GetResult();

            rGrid.Reload();
        }
        else
        {
            rGrid.CancelEditRow(obj);
        }
    }

    void InsertRow()
    {
        rGrid.InsertRow(new CustomerViewModel());
    }

    void OnCreateRow(CustomerViewModel obj)
    {
        var result = client.PostAsync<CustomerViewModel>(obj, "/api/Customer").Result;
    }
}

