@using Radzen
@using Radzen.Blazor

@inherits BaseComponent.BaseGrid<MaterialViewModel>
<RadzenCard Style="padding:5px;">
    <div class="d-flex flex-row">
        <div class="pr-1">
            <RadzenButton Size="ButtonSize.Small" Icon="add" Click="InsertRow" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
        </div>
        <div class="pr-1">
            <RadzenButton Size="ButtonSize.Small" Icon="save" Click="SaveRow" ButtonStyle="ButtonStyle.Info"></RadzenButton>
        </div>
        <div class="pr-1">
            <RadzenButton Size="ButtonSize.Small" Icon="clear" Click="CancelEdit" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
        </div>
        <div class="pr-1">
            <RadzenButton Size="ButtonSize.Small" Icon="delete" Click="DeleteRow" ButtonStyle="ButtonStyle.Danger"></RadzenButton>
        </div>
    </div>
</RadzenCard>
<RadzenDataGrid @ref="Grid" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowColumnResize="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                EditMode="DataGridEditMode.Single" RowDoubleClick="RowDoubleClickHandler" RowSelect="RowClickHandler"
                Data="@Data" TItem="MaterialViewModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" @onkeypress="@(e => KeyPressed(e))">
    <Columns>
        <RadzenDataGridColumn TItem="MaterialViewModel" Property="Name" Title="Имя">
            <Template Context="dsourse">
                <span>@dsourse.Name</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenTextBox AutoComplete="false" @bind-Value="dsourse.Name" Style="width:100%"></RadzenTextBox>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="MaterialViewModel" Property="Price" Title="Цена">
            <Template Context="dsourse">
                <span>@dsourse.Price</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenNumeric Min="0" @bind-Value="dsourse.Price" Style="width:100%"></RadzenNumeric>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="MaterialViewModel" Property="UnitId" Title="Ед измер">
            <Template Context="dsourse">
                <span>@units.FirstOrDefault(x => x.Id == dsourse.UnitId)?.Name</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenDropDown Data="units" @bind-Value="dsourse.UnitId" TValue="int" ValueProperty="Id" TextProperty="Name" Style="width:100%"></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="MaterialViewModel" Property="ProductTypeId" Title="Тип продукта">
            <Template Context="dsourse">
                <span>@producttypes.FirstOrDefault(x => x.Id == dsourse.ProductTypeId)?.Name</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenDropDown Data="producttypes" @bind-Value="dsourse.ProductTypeId" TValue="int?" ValueProperty="Id" TextProperty="Name" Style="width:100%"></RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="MaterialViewModel" Property="Description" Title="Описание">
            <Template Context="dsourse">
                <span>@dsourse.Description</span>
            </Template>
            <EditTemplate Context="dsourse">
                <RadzenTextBox @bind-Value="dsourse.Description" Style="width:100%"></RadzenTextBox>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@using Components.Unit;
@code{
    private IEnumerable<UnitViewModel> units = new List<UnitViewModel>();
    private IEnumerable<ProductType.ProductTypeViewModel> producttypes = new List<ProductType.ProductTypeViewModel>();
    protected async override Task OnInitializedAsync()
    {
        RemotePath = "/api/Material";
        ConfirmProperty = "Name";
        await GetDataAsync();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        units = await client.GetAsync<IEnumerable<UnitViewModel>>("/api/Unit");
        producttypes = await client.GetAsync<IEnumerable<ProductType.ProductTypeViewModel>>("/api/ProductType");
    }
}

